exit
checkfield_id == "dgGoals_ctl07_chkStatus"
checkfield_id
agent.submit(update_form, update_button)
update_button = update_form.button_with(:name => "btnUpdate")
update_form = agent.page.form_with(:name => "Form1")
      checkfield.check
      next unless checkfield.present?
      checkfield = gps_form.checkbox_with(:id => "dgGoals_ctl02_chkStatus")
      checkfield_id = "dgGoals_ctl" + goal_id + "_chkStatus"
goal_id = target_span_id[/\d\d/]
      target_span_id = landing_page.at("span:contains(\"#{target_goal}\")").present? ? landing_page.at("span:contains(\"#{target_goal}\")").first[1] : ""
target_goal = user.goals.first.body
exit
agent.submit(gps_form, update_button)
update_button = gps_form.button_with(:name => "btnUpdate")
checkfield.check
checkfield = gps_form.checkbox_with(:id => "dgGoals_ctl02_chkStatus")
checkfield_id = "dgGoals_ctl" + goal_id + "_chkStatus"
goal_id = target_span_id[/\d\d/]
target_span_id.blank?
target_span_id = landing_page.at("span:contains(\"#{target_goal}\")").present? ? landing_page.at("span:contains(\"#{target_goal}\")").first[1] : ""
target_goal = user.goals.first.body
target_goal = user.goal.first.body
exit
agent.submit(gps_form, update_button)
target_goal
update_button = gps_form.button_with(:name => "btnUpdate")
checkfield.check
checkfield.present?
next unless checkfield.present?
checkfield = gps_form.checkbox_with(:id => "dgGoals_ctl02_chkStatus")
checkfield_id = "dgGoals_ctl" + goal_id + "_chkStatus"
goal_id = target_span_id[/\d\d/]
target_span_id = landing_page.at("span:contains(\"#{target_goal}\")").present? ? landing_page.at("span:contains(\"#{target_goal}\")").first[1] : ""
abc[/\d\d/]
abcd.blank?
abcd = nil
abcd.blank?
abcd = ""
match.pre_match
match.pre+match
match[0]
match = pattern.match(abc)
pattern.match(abc)
pattern = /\d\d/
match[0]
abc =~ /\d\d/
abc = landing_page.at("span:contains(\"#{target_goal}\")").first[1]
landing_page.at("span:contains(\"#{target_goal}\")").first[1]
l =~ /_lblGoals/
l =~ /dgGoals/
l = landing_page.at("span:contains(\"#{target_goal}\")").first[1]
landing_page.at("span:contains(\"#{target_goal}\")").first[1]
landing_page.at("span:contains(\"#{target_goal}\")")
landing_page.at("span:contains(#{target_goal})")
landing_page.at(span:contains(#{target_goal})")
"span:contains(#{target_goal})"
'span:contains("#{target_goal}")'
landing_page.at('span:contains("#{target_goal}")')
landing_page.at('span:contains(#{target_goal})')
target_goal
landing_page.at('span:contains("Rake tasks error")')
landing_page
landing_page.at('span:contains(#{target_goal})')
landing_page.at('span:contains("#{target_goal}")')
target_goal
landing_page.at('span:contains("#{target_goal}")')
landing_page.at("span:contains(#{target_goal})")
target_span_id = landing_page.at("span:contains(#{target_goal})").present? ? landing_pag
target_goal = user.goals.first.body
target_goal = user.goal.first.body
c
user
c
user
c
decrypted_pass = crypt.decrypt_and_verify(user.credential.password)
crypt =  ActiveSupport::MessageEncryptor.new(Rails.application.secrets.secret_key_base)
user.credential.password
user.credential.passwrod
user
c
Rails.application.secrets
c
data = crypt.encrypt_and_sign(params[:credential][:password])
params[:credential][:password]
crypt = ActiveSupport::MessageEncryptor.new(Rails.application.secrets.secret_key_base)
Rails.application.secrets.secret_key_base
Rails.application.secrets
crypt = ActiveSupport::MessageEncryptor.new(Rails.configuration.secret_key_base)
exit
crypt = ActiveSupport::MessageEncryptor.new(Rails.configuration.secret_key_base)
params[:credential][:password]
paramsp[:credential][:password]
params
c
user
c
user
c
user
c
user
c
begin
login_page = agent.get("http://www.ourgoalplan.com/Login.aspx")
 agent = Mechanize.new
c
exit
gps_form.field_with(:name => "ucAddGoal$txtAddGoal").value = user.goals.first
gps_form = landing_page.form
landing_page = login_form.submit(button)
button = login_form.button_with(:name => "btnLogin")
login_form.field_with(:name => "txtPassword").value = user.credential.password
login_form.field_with(:name => "txtName").value = user.credential.username
user.credential.username
login_form = login_page.form
login_page = agent.get("http://www.ourgoalplan.com/Login.aspx")
agent = Mechanize.new
user
c
Date.strptime(params[:date], "%m/%d/%Y")
Date.strptime(params[:goal][:date], "%m/%d/%Y")
c
params[:date]
goal = current_user.goals.new(:body => params[:goal][:body], date: Date.strptime(params[:date], "%m/%d/%Y"))
c
v
params[:goal][:date]
Date.strptime(params[:goal][:date], "%m/%d/%Y")
params[:goal][:date]
c
Date.strptime(params[:goal][:date]
 Date.strptime(params[:goal][:date]
c
goal = current_user.goals.new(:goals => params[:goal][:goals], date: Date.strptime(params[:goal][:date], "%m/%d/%Y"))
goal = current_user.goals.new(:goals => params[:goal][:goals], date: Date.strptime(params[:goal][:date], "%m/%d/%Y")
goal = current_user.goals.new(:goals => params[:goal][:goals], date: Date.strptime(params[:goal][:date]), "%m/%d/%Y")
oal = current_user.goals.new(:goals => params[:goal][:goals], date: Date.strptime(params[:goal][:date]), "%m/%d/%Y")
params[:goal][:date]
c
v
current_user.goals.last
current_user.goals.new(:goals => "1234")
current_user.goals.last
goal = current_user.goals.new(:goals => "123")
current_user.goals.last
goal = current_user.goals.new(date: params[:goal][:date])
goal = current_user.goals.new(:goals => params[:goal][:goals], date: params[:goal][:date])
params[:goal][:date]
params
c
goal
goal.errors
params
c
v
c
v
goal.save!
goal = Goal.new(:goals => params[:goal][:goals])
goal = Goal.new(params[:goal][:goals])
params[:goal][:goals]
params[:goal]
goal = Goal.new(params[:goals])
params
c
@goal = Goal.find(params[:id])
params[:id]
params[:goal]
@goal = Goal.find(params[:goal][:id])
params
c
params
c
@goal = Goal.first
c
params
c
params
c
params
c
current_user.create_credential(credential_params)
current_user.credential.create(credential_params)
current_user.credential.create(credential_params).attributes
c
current_user.credential.ne~w(credential_params).attributes
c
Credential.new(credential_params).attributes
@credential = current_user.credential.new(credential_params).attributes
c
current_user.credential.create(credential_params)
c
current_user.credential.create(credential_params)
current_user.credential.new(credential_params)
params[:credential]
credential_params
c
Credential.create(credential_paramters)
@credential
credential_parameters
params[:credential]
c
params[:credential]
c
params[:credential]
params
c
Credential.new
@credential = current_user.credential.new
c
current_user.credential
current_user
@credentials = current_user.credential.create
c
@credentials = current_user.credential.build
@credentials = current_user.credentials.build
c
current_user
